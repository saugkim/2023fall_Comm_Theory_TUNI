% COMM.SYS.300 COMMUNICATION THEORY
% Matlab Exercise #3 (1.11.2023)

% Digital transmission: Baseband PAM (Pulse Amplitude Modulation), Pulse‐shaping and Eye‐diagrams

%% 1. SYMBOLS AND SINC‐PULSE

% 1.1 GENERATION OF SYMBOLS

% In this exercise we consider only real‐valued PAM (Pulse Amplitude Modulation) symbols.  

clear; clc; close all;

% Generate a 4‐PAM symbol alphabet, which consists of all possible symbol values
alphabet = [-3 -1 1 3];                     % Symbol alphabet for 4-PAM

% Generate 10 random symbols from the 4‐PAM alphabet
N_symbols = 10;

% Random vector that includes integers (= "symbol indices”) between 1 and 4:
symbol_ind = randi(length(alphabet), 1, N_symbols);

% these numbers represent the symbols indices in the alphabet (1=>"-3", 2=>"-1", 3=>"1", 4=>"3")
symbols = alphabet(symbol_ind);             % Generate a random symbol sequence

%  Plot the symbol sequence
figure('Name','1.1 Symbol generation')
stem(symbols);                              % Plots the symbol sequence
title('Symbol sequence')


%% 1.2 ILLUSTRATION OF A BASEBAND SIGNAL BY USING SINC‐PULSES

% following parameters:
%   Oversampling factor   r = 10 (number of samples per one pulse/symbol)
%   Symbol time interval  T = 1μs

% Generate a sinc‐pulse
% POINT: understand the difference between the "symbol time interval: 1 μs" 
%                                      and the "sample time interval: 0.1 μs"

r = 10;                     % samples per pulse/symbol (oversampling factor)
T = 1e-6;                   % Symbol time interval [s]. (1 μs)
Fs = r/T;                   % Sampling frequency   (10e7)
Ts = 1/Fs;                  % Sample time interval (0.1 μs)
t = 0:Ts:N_symbols*T;       % Time vector (sampling intervals) for all symbols

% Generation of the sinc pulse:

% -> Option #1 (traditional)
% p = sinc(t/T);                   % The pulse given in fixed time vector defined by t

% -> Option #2 (The pulse given in function defined by the time vector parameter t) 
% In Matlab this is called a handle function and it is more convenient in our case, 
% Here p is not a double-variable, but a function that can be called any time for different time vectors

p = @(t) sinc(t/T);                 % Sinc pulse handle function
% Plot one sinc‐pulse p between time ‐10μs…10μs
t_plot = -10e-6:Ts:10e-6;           % plot time interval
figure('Name','1.2 Baseband signal of sinc pulse')
plot(t_plot, p(t_plot))
xlabel('Time [s]')
ylabel('Amplitude')
grid on
xlim([-10e-6 10e-6])      
title('Sinc-pulse')


% Generate the PAM signal x(t) for the whole symbol sequence and plot the signal in time domain. 
% Include also plots of different pulses in the same figure by using different colors.

figure ('Name', '1.2 PAM signal in time domain')
hold on 
x = 0;                      % initialize the sum of pulses (i.e. the total signal x(t))
a = symbols;                % Renaming the symbol vector according to the equation notation

% For each symbol index k, we generate the weighted pulse 
% and add it to the overall sum defining the PAM signal x
for k = 0:N_symbols-1 
  kth_pulse = a(k+1)*p(t-k*T);       % kth pulse weighted by the symbol a_k
  x = x + kth_pulse;                 % add the kth pulse to the overall sum (PAM signal)
  plot(t, kth_pulse, 'LineWidth', 1)
end
plot(t, x, 'k', 'LineWidth', 2.5)     % Plotting the total signal x with black color

% In the end, plot the symbol values in their correct time instants
plot(0:T:T*(N_symbols-1), symbols(1:N_symbols), 'ko', 'MarkerSize', 8)
ylabel('Symbol alphabet')
xlabel('time [s]')
hold off
grid on

% study the generated PAM signal and pay attention to the Nyquist criterion. 
% For example, at which time instants you should take samples from the PAM signal 
% in order to recover the transmitted symbols?
% ---> Take samples at every T (=1μs), 1,2,3,4,5,6,7μs...


%% 2 BASEBAND SIGNAL BY USING A RAISED‐COSINE PULSE

% Sinc‐pulses are not a practical solution for generating PAM signals. 
% For example, they are infinite in length, for which reason they have to be cut in practice. 
% And cutting the sinc‐pulse often leads to undesired spectrum spreading, 
% which causes interference to signals in adjacent frequencies. 

% Raised‐cosine pulses are weighted with an appropriate windowing function, 
% α is a roll‐off factor which defines amount the excess bandwidth 
%   (the larger α means the wider spectrum). 

% Generate the PAM signal by using the raised‐cosine pulse as a transmitter filter. 
% Unlike in task 1.2, where the PAM signal was generated by adding separate pulses together (a mathematical approach), 
% We achive the same PAM signal by filtering the symbol sequence with the transmitter filter (defined as the pulse shape)

% Use the following parameters
%   Oversampling factor   r = 3 (more practical than r=10)
%   Roll‐off factor       α = 0.3
%   Symbol time interval  T = 1μs
%   The overall pulse duration is 10 symbols (the time vector t of one pulse is defined over period of 10 symbols)

clear; clc; close all;

r = 3;              % Oversampling factor
T = 1e-6;           % Symbol time interval (1 μs)
Fs = r/T;           % Sampling frequency   (3*e6)
Ts = 1/Fs;          % Sampling time        (1/3 μs)
t = -5*T:Ts:5*T;    % Time vector (sampling intervals) for one pulse (total number=31)
alfa = 0.30;        % Roll-off factor

% Generate 500 4‐PAM symbols
% Generate the raised cosine pulse for the given time vector t and plot the pulse in time

alphabet = [-3,-1,1,3];
N_symbols = 500;
symbol_ind = randi(length(alphabet), 1, N_symbols);
symbols = alphabet(symbol_ind);             


% Raised-Cosine FIR filter:
p = sinc(t/T).*((cos(alfa*pi*t/T))./(1-((2*alfa*t/T).^2)));

figure ('Name', '2. Raised-Cosine FIT filter')
plot(t,p)
hold on
stem(t,p)
xlabel('Time [s]')
ylabel('Amplitude')
title('Raised cosine pulse')
hold off


% Filter the symbol sequence with the pulse‐shape p in order to get the PAM signal x(t)
%   The samples of "symbol sequence" and "pulse shape" are NOT given in the same sampling rate,
%   the sample durations of the symbol sequence and the pulse‐shape are T and Ts, respectively.
%   Thus, we must first match the sampling rates by oversampling the symbol sequence

% Zero vector initialized for Up-sampled symbol sequence
symbol_upsampled = zeros(size(1:r*N_symbols));

% Up-sampled sequence, i.e. a1, 0, 0, a2, 0, 0, a3, 0, 0, a4, 0, ...
symbol_upsampled(1:r:r*N_symbols) = symbols;

% Transmitter filtering
xn = filter(p, 1, symbol_upsampled);

% Remove filter delay. 
%   In general it is the sample index of the the maximum value of the impulse response. 
%   check "figure, stem(1:length(p),p)", where the maximum is at the 16th sample. 
%   the first symbol corresponds the 16th sample ? - yes
figure('Name', '2. Impulse response of the filter')
stem(1:length(p), p)
xlabel('Sample index')

filter_delay = (length(p)-1)/2;
xn = xn(filter_delay+1:end);

% Plot the first 200 samples from the generated PAM signal
figure('Name', '2. Generated PAM signal')
plot(0:Ts:199*Ts, xn(1:200));
xlabel('Time [s]')
ylabel('Amplitude') 
title('PAM signal')


%% 3 EYE‐DIAGRAM AND SPECTRAL CONSIDERATIONS

% 3.1 PLOTTING THE EYE DIGRAM

% Recall from the lecture notes the concept of eye‐diagram.  
% Plot the eye‐diagram for the generated 4‐PAM signal

figure ('Name', '3.1 Eye-diagram of Noiseless 4-PAM signal')
hold on
for i = 1:2*r:(length(xn)-2*r)
  plot(xn(i:i+2*r),'b');
end
hold off
grid on
title('Eye-diagram of Noiseless signal')


% Add noise to the signal:  SNR = 20dB
SNR_target = 20;                % SNR in dB
zn = randn(size(xn));           % White Gaussian random noise

% Signal power
P_xn = var(xn);                 % relies on the ergodicity of the signal model
% P_xn = mean(abs(xn).^2);      % exact power for this realization

% Noise power
P_zn = var(zn);                 % relies on the ergodicity of the signal model
noise_scaling_factor = sqrt(P_xn/P_zn/10^(SNR_target/10));

% Noisy signal
yn = xn + noise_scaling_factor*zn;

% Make sure that the SNR is OK (just in case…):
P_zn_scaled = var(noise_scaling_factor*zn);
SNR_check = 10*log10(P_xn/P_zn_scaled) ;
disp(SNR_check);               % => 20


% Plot the first 200 samples of the noisy signal
% Plot the eye‐diagram for the noisy 4‐PAM signal

figure('Name', '3.1 Noisy 4-PAM signal')
plot(0:Ts:199*Ts, yn(1:200));  
hold on
plot(0:Ts:199*Ts, xn(1:200));
xlabel('Time [s]')
ylabel('Amplitude') 
legend('Noisy', 'Noiseless')
hold off
title('4-PAM signal')

figure('Name', '3.1 Eye-diagram of Noisy 4-PAM signal')
hold on
for i = 1:2*r:(length(yn)-2*r)
  plot(yn(i:i+2*r),'b');
end
hold off
grid on
title('Eye-diagram of Noisy signal')

% Recall how different non‐idealities (noise, timing errors and jitter) affect the eye‐opening of the eye‐diagram. 
%  What do you see? 
%      ---> non-ideal case, values of symbols are scattered(continuous values)
%      around discrete value of -3, -1, 1, 3, it has smaller eye-opening compared to noiseless in height and width.
%      irregular eye-shape, but still the value can be determined

%  What is the difference between the noiseless and noisy eye‐diagrams?
%      ---> for noiseless case, values of symbols are discrete number of -3, -1, 1, 3, 
%      with height and width of eye is maximum (diamond shape), 
%      but in case of noisy signal, height of eye is smaller than noiseless with distorted shape in both direction.

%% 3.2 SIGNAL SPECTRUM AND PULSE SPECTRUM

% Plot the (two‐sided) spectrum of the pulse shape p(t) by using the FFT‐size of 2048
% Plot the spectrum of the noiseless PAM signal x(t) by using the FFT‐size of 2048
% Plot the spectrum of the noisy PAM signal by using the FFT‐size of 2048


N_freq = 2048;
freq_vector_normalized = -1:2/N_freq:(1-2/N_freq);

figure('Name', '3.2 Spectrum of the pulse')
plot(freq_vector_normalized, fftshift(abs(fft(p, N_freq))));
title('Spectrum of the pulse')
xlabel('Normalized frequency [Fs/2 = 1]')

figure('Name', '3.2 Spectrum of the PAM signal')
plot(freq_vector_normalized, fftshift(abs(fft(xn, N_freq))));
title('Spectrum of PAM signal x(t)')
xlabel('Normalized frequency [Fs/2 = 1]')

figure('Name', '3.2 Spectrum of the PAM signal')
plot(freq_vector_normalized, fftshift(abs(fft(yn, N_freq))));
title('Spectrum of noisy PAM signal y(t)')
xlabel('Normalized frequency [Fs/2 = 1]')


% Compare the pulse spectrum and the PAM signal spectra. Any similarities in spectrum shape or bandwidth?  
% --> They all have similar spectrum shape. 
%     Looks that all have same bandwidth in the normalized scale, 
%     but i could not figure out which "Fs" value should be used.

%     I took a photo of pam spectrum result (frequency range -2MHz to 2MHz) from the matlab meeting, 
%     the bandwidth is different from mine, when I take sampling frequency, fs=3MHz...
%     May I ask where the value(2 MHz) came from? 

%% 3.3 MODIFYING THE SYSTEM PARAMETER

% In the following, we test the above code by modifying a single parameter at the time. 
% Default parameters [4‐PAM signal, SNR=20dB, α=0.3]   

clear; clc; close all;

SNRs =          [20, 15, 10];
roll_factors =  [0.3, 0.05, 0.95];
alphabet4 =     [-3, -1, 1, 3];              % Alphabet for 4-PAM
alphabet8 =     [-7 -5 -3 -1 1 3 5 7];       % Alphabet for 8-PAM (or alphabet=-7:2:7)
alphabets =     {alphabet4, alphabet8};

% sampling 
r = 3;              % Oversampling factor
T = 1e-6;           % Symbol time interval [s].
Fs = r/T;           % Sampling frequency
Ts = 1/Fs;          % Sampling time
t = -5*T:Ts:5*T;    % Time vector (sampling intervals) for one pulse
N_symbols = 500;

% TIP: To get the "same" random noise realization for each test, 
% use random number generator number (seed) in the beginning of the code, rng(41307) 
rng(41307);

N_freq = 2048;
freq_vector_normalized = -1:2/N_freq:(1-2/N_freq);

% set default
alfa = roll_factors(1);
SNR_target = SNRs(1);      
alphabet = alphabet4;

p = sinc(t/T).*((cos(alfa*pi*t/T))./(1-((2*alfa*t/T).^2)));

symbol_ind = randi(length(alphabet), 1, N_symbols);
symbols = alphabet(symbol_ind);             

symbol_upsampled = zeros(size(1:r*N_symbols));
symbol_upsampled(1:r:r*N_symbols) = symbols;

x = filter(p, 1, symbol_upsampled);
filter_delay = (length(p)-1)/2;
x = x(filter_delay+1:end);

zn = randn(size(x));           
nx = x + sqrt( var(x)/var(zn)/10^(SNR_target/10) ) *zn;

figure('Name', 'Default Noisy 4-PAM signal')
plot(0:Ts:199*Ts, nx(1:200));
xlabel('Time [s]')
ylabel('Amplitude')                          
title('Noisy 4-PAM signal at SNR=20dB, a=0.30')

figure('Name', 'Default Noisy 4-PAM signal')
hold on
for i = 1:2*r:(length(nx)-2*r)
    plot(nx(i:i+2*r),'b');
end
hold off
grid on
title('Eye-diagram at SNR=20dB, a=0.30')


figure('Name', 'Default Noisy 4-PAM')
plot(freq_vector_normalized, fftshift(100*abs(fft(p, N_freq))));
hold on
plot(freq_vector_normalized, fftshift(abs(fft(nx, N_freq))));
hold off
legend('Shape of pulse', 'Noisy 4-PAM signal')
xlabel('Normalized frequency')
title('Spectrum at SNR=20dB, a=0.30')

%% Symbol alphabet size
% Test the system by using 8‐PAM compared to 4‐PAM, what was the effect on
%    Pulse shape?   
%        --> Same pulse shape (same roll factor)
%    Eye diagram?   
%        --> Different eye-diagram, 8-PAM has double values in number , 
%        8-PAM has more inter-symbol-intererence under same SNR, size of eye is smaller than case of 4-PAM      
%    Spectrum and bandwidth?
%        --> Same bandwidth and smilar-in general- shape for both cases

alfa = roll_factors(1);
SNR_target = SNRs(1);          

p = sinc(t/T).*((cos(alfa*pi*t/T))./(1-((2*alfa*t/T).^2)));

for idx = 1:2
  alphabet = cell2mat(alphabets(idx));
  symbol_ind = randi(length(alphabet), 1, N_symbols);
  symbols = alphabet(symbol_ind);             

  symbol_upsampled = zeros(size(1:r*N_symbols));
  symbol_upsampled(1:r:r*N_symbols) = symbols;

  x = filter(p, 1, symbol_upsampled);
  filter_delay = (length(p)-1)/2;
  x = x(filter_delay+1:end);

  zn = randn(size(x));           
  nx = x + sqrt( var(x)/var(zn)/10^(SNR_target/10) ) *zn;

  figure(1)
  subplot(2,1,idx)
  plot(0:Ts:199*Ts, nx(1:200));
  xlabel('Time [s]')
  ylabel('Amplitude')                          
  title(['Noisy signal of ' num2str(idx*4) '-PAM'])

  figure(2)
  subplot(1,2,idx)
  hold on
  for i = 1:2*r:(length(nx)-2*r)
    plot(nx(i:i+2*r),'b');
  end
  hold off
  grid on
  title(['Eye-diagram of Noisy ' num2str(idx*4) '-PAM'])
  ylim([-idx*6, idx*6])

  figure(3)
  subplot(2,1,idx)
  plot(freq_vector_normalized, fftshift(200*abs(fft(p, N_freq))));
  hold on
  plot(freq_vector_normalized, fftshift(abs(fft(nx, N_freq))));
  hold off
  legend('Shape of pulse', 'Noisy PAM signal')
  title(['Spectrum of Noisy ' num2str(idx*4) '-PAM'])

end

%% SNR effect
% Test the system by using SNR=15dB and SNR=10dB compared to SNR=20dB, what was the effect on
%    Pulse shape?
%         --> Pulse sahpe is same for all SNR        
%    Eye diagram?
%         --> Eye-diagram depends on SNR, eye height (vertical opening of the eye diagram) is related to SNR, 
%         eye-opening is well visible in higher SNR (20dB), 
%         in case of higher noise power (10dB), eye closure is observed
%    Spectrum and bandwidth?
%         --> Same bandwidth and smilar shape of spectrum for all SNR

close all;

alphabet = alphabet4;
alfa = roll_factors(1);
p = sinc(t/T).*((cos(alfa*pi*t/T))./(1-((2*alfa*t/T).^2)));

symbol_ind = randi(length(alphabet), 1, N_symbols);
symbols = alphabet(symbol_ind);             

symbol_upsampled = zeros(size(1:r*N_symbols));
symbol_upsampled(1:r:r*N_symbols) = symbols;

x = filter(p, 1, symbol_upsampled);
filter_delay = (length(p)-1)/2;
x = x(filter_delay+1:end);
    
for idx = 1:3    
    SNR_target = SNRs(idx);
    zn = randn(size(x));           
    nx = x + sqrt( var(x)/var(zn)/10^(SNR_target/10) ) *zn;

    figure(1) 
    subplot(3, 1, idx)
    plot(0:Ts:199*Ts, nx(1:200));
    xlabel('Time [s]')
    ylabel('Amplitude')                          
    title(['Noisy 4-PAM signal at SNR = ' num2str(SNRs(idx))])

    figure(2)
    subplot(3, 1, idx)
    hold on
    for i = 1:2*r:(length(nx)-2*r)
        plot(nx(i:i+2*r),'b');
    end
    hold off
    grid on
    title(['Eye-diagram at SNR = ' num2str(SNRs(idx))])

    figure(3)
    subplot(3,1,idx)
    plot(freq_vector_normalized, fftshift(100*abs(fft(p, N_freq))));
    hold on
    plot(freq_vector_normalized, fftshift(abs(fft(nx, N_freq))));
    hold off
    legend('Shape of pulse', 'Noisy 4-PAM signal')
    title(['Spectrum at SRN = ' num2str(SNRs(idx))])
 end


%% Roll-off factor effect

% Test the system by using α=0.05 and α=0.95 compared to α=0.3
% what was the effect on
%    Pulse shape?
%       --> pulse shape depends on roll-off factor α, wider shape for higher roll-off factor         
%    Eye diagram?
%       --> height of eye-opening looks same (same noise power) for all cases, 
%       but wider eye-opening is observed for higher roll-factor
%    Spectrum and bandwidth?
%       --> Spectrum of PAM also depends on roll-off factor same as pulse
%       shape (shape of spectrum is similar to corresponding pulse shape)
%       --> wider bandwidth for higher roll-off factor, lowest roll-factor (0.05) has very narrow bandwidth      

close all;

alphabet = alphabet4;
SNR_target = SNRs(1);

symbol_ind = randi(length(alphabet), 1, N_symbols);
symbols = alphabet(symbol_ind);             

symbol_upsampled = zeros(size(1:r*N_symbols));
symbol_upsampled(1:r:r*N_symbols) = symbols;

for idx = 1:3
    alfa = roll_factors(idx);
    p = sinc(t/T).*((cos(alfa*pi*t/T))./(1-((2*alfa*t/T).^2)));

    x = filter(p, 1, symbol_upsampled);
    filter_delay = (length(p)-1)/2;
    x = x(filter_delay+1:end);
    
    zn = randn(size(x));           
    nx = x + sqrt( var(x)/var(zn)/10^(SNR_target/10) ) *zn;

    figure(1)
    subplot(3, 1, idx)
    plot(0:Ts:199*Ts, nx(1:200));
    xlabel('Time [s]')
    ylabel('Amplitude')                          
    title(['Noisy 4-PAM signal at roll-off factor = ' num2str(roll_factors(idx))])

    figure(2)
    subplot(3, 1, idx)
    hold on
    for i = 1:2*r:(length(nx)-2*r)
        plot(nx(i:i+2*r),'b');
    end
    hold off
    grid on
    title(['Eye-diagram at roll-off factor = ' num2str(roll_factors(idx))])

    figure(3)
    subplot(3,1,idx)
    plot(freq_vector_normalized, fftshift(100*abs(fft(p, N_freq))));
    hold on
    plot(freq_vector_normalized, fftshift(abs(fft(nx, N_freq))));
    hold off
    legend('Shape of pulse', 'Spectrum of Noisy 4-PAM signal')
    title(['Spectrum at roll-off factor = ' num2str(roll_factors(idx))])
end

